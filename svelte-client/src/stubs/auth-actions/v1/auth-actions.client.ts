// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth-actions/v1/auth-actions.proto" (package "authActions", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthActionsService } from "./auth-actions";
import type { CheckTokenResponse } from "./auth-actions";
import type { CheckTokenRequest } from "./auth-actions";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./auth-actions";
import type { LoginRequest } from "./auth-actions";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service authActions.AuthActionsService
 */
export interface IAuthActionsServiceClient {
    /**
     * Unary
     *
     * @generated from protobuf rpc: Login(authActions.LoginRequest) returns (authActions.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: CheckToken(authActions.CheckTokenRequest) returns (authActions.CheckTokenResponse);
     */
    checkToken(input: CheckTokenRequest, options?: RpcOptions): UnaryCall<CheckTokenRequest, CheckTokenResponse>;
}
/**
 * @generated from protobuf service authActions.AuthActionsService
 */
export class AuthActionsServiceClient implements IAuthActionsServiceClient, ServiceInfo {
    typeName = AuthActionsService.typeName;
    methods = AuthActionsService.methods;
    options = AuthActionsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Unary
     *
     * @generated from protobuf rpc: Login(authActions.LoginRequest) returns (authActions.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckToken(authActions.CheckTokenRequest) returns (authActions.CheckTokenResponse);
     */
    checkToken(input: CheckTokenRequest, options?: RpcOptions): UnaryCall<CheckTokenRequest, CheckTokenResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckTokenRequest, CheckTokenResponse>("unary", this._transport, method, opt, input);
    }
}
